//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyMetadataAttribute("CommitHash", "5c9b173559adb21f3b17a59ffd37acadd6d443f0")]
[assembly: System.Reflection.AssemblyCompanyAttribute("Microsoft.Toolkit")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyCopyrightAttribute("(c) .NET Foundation and Contributors.  All rights reserved.")]
[assembly: System.Reflection.AssemblyDescriptionAttribute(@"
      This package includes high performance .NET Standard helpers such as:
      - ArrayPoolBufferWriter<T>: an IBufferWriter<T> implementation using pooled arrays, which also supports IMemoryOwner<T>.
      - MemoryBufferWriter<T>: an IBufferWriter<T>: implementation that can wrap external Memory<T>: instances.
      - MemoryOwner<T>: an IMemoryOwner<T> implementation with an embedded length and a fast Span<T> accessor.
      - SpanOwner<T>: a stack-only type with the ability to rent a buffer of a specified length and getting a Span<T> from it.
      - StringPool: a configurable pool for string instances that be used to minimize allocations when creating multiple strings from char buffers.
      - String, array, Span<T>, Memory<T> extensions and more, all focused on high performance.
      - HashCode<T>: a SIMD-enabled extension of HashCode to quickly process sequences of values.
      - BitHelper: a class with helper methods to perform bit operations on numeric types.
      - ParallelHelper: helpers to work with parallel code in a highly optimized manner.
      - Box<T>: a type mapping boxed value types and exposing some utility and high performance methods.
      - Ref<T>: a stack-only struct that can store a reference to a value of a specified type.
      - NullableRef<T>: a stack-only struct similar to Ref<T>, which also supports nullable references.
  ")]
[assembly: System.Reflection.AssemblyProductAttribute("Microsoft.Toolkit.HighPerformance")]
[assembly: System.Reflection.AssemblyTitleAttribute("Microsoft.Toolkit.HighPerformance")]

// Generated by the MSBuild WriteCodeFragment class.

