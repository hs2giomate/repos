//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace UnitTests
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        private global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace UnitTests.UWP.UnitTests_UWP_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[37];
            _typeNameTable[0] = "Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension";
            _typeNameTable[1] = "Windows.UI.Xaml.Markup.MarkupExtension";
            _typeNameTable[2] = "System.Type";
            _typeNameTable[3] = "System.Reflection.MemberInfo";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "UnitTests.Extensions.Animal";
            _typeNameTable[6] = "System.Enum";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "UnitTests.Extensions.MockSwipeItem";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[10] = "Windows.UI.Xaml.Controls.IconSource";
            _typeNameTable[11] = "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[14] = "Int32";
            _typeNameTable[15] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[16] = "System.Nullable`1<Boolean>";
            _typeNameTable[17] = "Boolean";
            _typeNameTable[18] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[19] = "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool";
            _typeNameTable[20] = "UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty";
            _typeNameTable[21] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[22] = "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension";
            _typeNameTable[23] = "System.Uri";
            _typeNameTable[24] = "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension";
            _typeNameTable[25] = "Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension";
            _typeNameTable[26] = "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[28] = "Double";
            _typeNameTable[29] = "Windows.UI.Text.FontWeight";
            _typeNameTable[30] = "Windows.UI.Text.FontStyle";
            _typeNameTable[31] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[32] = "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension";
            _typeNameTable[33] = "String";
            _typeNameTable[34] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[35] = "Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension";
            _typeNameTable[36] = "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension";

            _typeTable = new global::System.Type[37];
            _typeTable[0] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Markup.MarkupExtension);
            _typeTable[2] = typeof(global::System.Type);
            _typeTable[3] = typeof(global::System.Reflection.MemberInfo);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::UnitTests.Extensions.Animal);
            _typeTable[6] = typeof(global::System.Enum);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::UnitTests.Extensions.MockSwipeItem);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.Controls.IconSource);
            _typeTable[11] = typeof(global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[14] = typeof(global::System.Int32);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[16] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[17] = typeof(global::System.Boolean);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[19] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool);
            _typeTable[20] = typeof(global::UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[22] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension);
            _typeTable[23] = typeof(global::System.Uri);
            _typeTable[24] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension);
            _typeTable[25] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension);
            _typeTable[26] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[28] = typeof(global::System.Double);
            _typeTable[29] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[30] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[32] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension);
            _typeTable[33] = typeof(global::System.String);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[35] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension);
            _typeTable[36] = typeof(global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_EnumValuesExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension(); }
        private object Activate_8_MockSwipeItem() { return new global::UnitTests.Extensions.MockSwipeItem(); }
        private object Activate_11_UniformGrid() { return new global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid(); }
        private object Activate_19_NullableBool() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool(); }
        private object Activate_20_ObjectWithNullableBoolProperty() { return new global::UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty(); }
        private object Activate_22_BitmapIconExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension(); }
        private object Activate_24_BitmapIconSourceExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension(); }
        private object Activate_25_SymbolIconSourceExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension(); }
        private object Activate_32_FontIconSourceExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension(); }
        private object Activate_35_SymbolIconExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension(); }
        private object Activate_36_FontIconExtension() { return new global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_0_EnumValuesExtension;
                userType.AddMemberName("Type");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Markup.MarkupExtension
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  System.Type
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Reflection.MemberInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Reflection.MemberInfo
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  UnitTests.Extensions.Animal
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Cat", global::UnitTests.Extensions.Animal.Cat);
                userType.AddEnumValue("Dog", global::UnitTests.Extensions.Animal.Dog);
                userType.AddEnumValue("Bunny", global::UnitTests.Extensions.Animal.Bunny);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  System.Enum
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  UnitTests.Extensions.MockSwipeItem
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_8_MockSwipeItem;
                userType.AddMemberName("IconSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Windows.UI.Xaml.Controls.IconSource
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_11_UniformGrid;
                userType.AddMemberName("Columns");
                userType.AddMemberName("FirstColumn");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("Rows");
                userType.AddMemberName("AutoLayout");
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Int32
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  System.Nullable`1<Boolean>
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Boolean"));
                userType.BoxInstance = userType.BoxType<global::System.Boolean>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Boolean
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_19_NullableBool;
                userType.AddMemberName("Value");
                userType.AddMemberName("IsNull");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 20:   //  UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_20_ObjectWithNullableBoolProperty;
                userType.AddMemberName("NullableBool");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_22_BitmapIconExtension;
                userType.AddMemberName("Source");
                userType.AddMemberName("ShowAsMonochrome");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 23:   //  System.Uri
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.Activator = Activate_24_BitmapIconSourceExtension;
                userType.AddMemberName("Source");
                userType.AddMemberName("ShowAsMonochrome");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 25:   //  Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension"));
                userType.Activator = Activate_25_SymbolIconSourceExtension;
                userType.AddMemberName("Symbol");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 26:   //  Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Markup.MarkupExtension"));
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("IsTextScaleFactorEnabled");
                userType.AddMemberName("MirroredWhenRightToLeft");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Double
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Text.FontWeight
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Text.FontStyle
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension"));
                userType.Activator = Activate_32_FontIconSourceExtension;
                userType.AddMemberName("Glyph");
                userType.AddMemberName("FontFamily");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 33:   //  String
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension"));
                userType.Activator = Activate_35_SymbolIconExtension;
                userType.AddMemberName("Symbol");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension
                userType = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension"));
                userType.Activator = Activate_36_FontIconExtension;
                userType.AddMemberName("Glyph");
                userType.AddMemberName("FontFamily");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_EnumValuesExtension_Type(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension)instance;
            return that.Type;
        }
        private void set_0_EnumValuesExtension_Type(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension)instance;
            that.Type = (global::System.Type)Value;
        }
        private object get_1_MockSwipeItem_IconSource(object instance)
        {
            var that = (global::UnitTests.Extensions.MockSwipeItem)instance;
            return that.IconSource;
        }
        private void set_1_MockSwipeItem_IconSource(object instance, object Value)
        {
            var that = (global::UnitTests.Extensions.MockSwipeItem)instance;
            that.IconSource = (global::Windows.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_2_UniformGrid_Columns(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Columns;
        }
        private void set_2_UniformGrid_Columns(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Columns = (global::System.Int32)Value;
        }
        private object get_3_UniformGrid_FirstColumn(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.FirstColumn;
        }
        private void set_3_UniformGrid_FirstColumn(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.FirstColumn = (global::System.Int32)Value;
        }
        private object get_4_UniformGrid_Orientation(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Orientation;
        }
        private void set_4_UniformGrid_Orientation(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_5_UniformGrid_Rows(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            return that.Rows;
        }
        private void set_5_UniformGrid_Rows(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid)instance;
            that.Rows = (global::System.Int32)Value;
        }
        private object get_6_UniformGrid_AutoLayout(object instance)
        {
            return global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.GetAutoLayout((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_6_UniformGrid_AutoLayout(object instance, object Value)
        {
            global::Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.SetAutoLayout((global::Windows.UI.Xaml.FrameworkElement)instance, (global::System.Nullable<global::System.Boolean>)Value);
        }
        private object get_7_NullableBool_Value(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.Value;
        }
        private void set_7_NullableBool_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.Value = (global::System.Boolean)Value;
        }
        private object get_8_NullableBool_IsNull(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            return that.IsNull;
        }
        private void set_8_NullableBool_IsNull(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool)instance;
            that.IsNull = (global::System.Boolean)Value;
        }
        private object get_9_ObjectWithNullableBoolProperty_NullableBool(object instance)
        {
            var that = (global::UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty)instance;
            return that.NullableBool;
        }
        private void set_9_ObjectWithNullableBoolProperty_NullableBool(object instance, object Value)
        {
            var that = (global::UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty)instance;
            that.NullableBool = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_10_BitmapIconExtension_Source(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension)instance;
            return that.Source;
        }
        private void set_10_BitmapIconExtension_Source(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_11_BitmapIconExtension_ShowAsMonochrome(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension)instance;
            return that.ShowAsMonochrome;
        }
        private void set_11_BitmapIconExtension_ShowAsMonochrome(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension)instance;
            that.ShowAsMonochrome = (global::System.Boolean)Value;
        }
        private object get_12_BitmapIconSourceExtension_Source(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension)instance;
            return that.Source;
        }
        private void set_12_BitmapIconSourceExtension_Source(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_13_BitmapIconSourceExtension_ShowAsMonochrome(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension)instance;
            return that.ShowAsMonochrome;
        }
        private void set_13_BitmapIconSourceExtension_ShowAsMonochrome(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension)instance;
            that.ShowAsMonochrome = (global::System.Boolean)Value;
        }
        private object get_14_SymbolIconSourceExtension_Symbol(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension)instance;
            return that.Symbol;
        }
        private void set_14_SymbolIconSourceExtension_Symbol(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_15_TextIconExtension_FontSize(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.FontSize;
        }
        private void set_15_TextIconExtension_FontSize(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_16_TextIconExtension_FontWeight(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.FontWeight;
        }
        private void set_16_TextIconExtension_FontWeight(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_17_TextIconExtension_FontStyle(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.FontStyle;
        }
        private void set_17_TextIconExtension_FontStyle(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_18_TextIconExtension_Foreground(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.Foreground;
        }
        private void set_18_TextIconExtension_Foreground(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_19_TextIconExtension_IsTextScaleFactorEnabled(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.IsTextScaleFactorEnabled;
        }
        private void set_19_TextIconExtension_IsTextScaleFactorEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.IsTextScaleFactorEnabled = (global::System.Boolean)Value;
        }
        private object get_20_TextIconExtension_MirroredWhenRightToLeft(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            return that.MirroredWhenRightToLeft;
        }
        private void set_20_TextIconExtension_MirroredWhenRightToLeft(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension)instance;
            that.MirroredWhenRightToLeft = (global::System.Boolean)Value;
        }
        private object get_21_FontIconSourceExtension_Glyph(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension)instance;
            return that.Glyph;
        }
        private void set_21_FontIconSourceExtension_Glyph(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension)instance;
            that.Glyph = (global::System.String)Value;
        }
        private object get_22_FontIconSourceExtension_FontFamily(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension)instance;
            return that.FontFamily;
        }
        private void set_22_FontIconSourceExtension_FontFamily(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_23_SymbolIconExtension_Symbol(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension)instance;
            return that.Symbol;
        }
        private void set_23_SymbolIconExtension_Symbol(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_24_FontIconExtension_Glyph(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension)instance;
            return that.Glyph;
        }
        private void set_24_FontIconExtension_Glyph(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension)instance;
            that.Glyph = (global::System.String)Value;
        }
        private object get_25_FontIconExtension_FontFamily(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension)instance;
            return that.FontFamily;
        }
        private void set_25_FontIconExtension_FontFamily(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension.Type":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.EnumValuesExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Type", "System.Type");
                xamlMember.Getter = get_0_EnumValuesExtension_Type;
                xamlMember.Setter = set_0_EnumValuesExtension_Type;
                break;
            case "UnitTests.Extensions.MockSwipeItem.IconSource":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UnitTests.Extensions.MockSwipeItem");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "IconSource", "Windows.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MockSwipeItem_IconSource;
                xamlMember.Setter = set_1_MockSwipeItem_IconSource;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Columns":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Columns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_UniformGrid_Columns;
                xamlMember.Setter = set_2_UniformGrid_Columns;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.FirstColumn":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FirstColumn", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_UniformGrid_FirstColumn;
                xamlMember.Setter = set_3_UniformGrid_FirstColumn;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Orientation":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_UniformGrid_Orientation;
                xamlMember.Setter = set_4_UniformGrid_Orientation;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.Rows":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Rows", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_UniformGrid_Rows;
                xamlMember.Setter = set_5_UniformGrid_Rows;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid.AutoLayout":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Controls.UniformGrid");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "AutoLayout", "System.Nullable`1<Boolean>");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_6_UniformGrid_AutoLayout;
                xamlMember.Setter = set_6_UniformGrid_AutoLayout;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.Value":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Value", "Boolean");
                xamlMember.Getter = get_7_NullableBool_Value;
                xamlMember.Setter = set_7_NullableBool_Value;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool.IsNull":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.NullableBool");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "IsNull", "Boolean");
                xamlMember.Getter = get_8_NullableBool_IsNull;
                xamlMember.Setter = set_8_NullableBool_IsNull;
                break;
            case "UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty.NullableBool":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UnitTests.Extensions.Helpers.ObjectWithNullableBoolProperty");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "NullableBool", "System.Nullable`1<Boolean>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ObjectWithNullableBoolProperty_NullableBool;
                xamlMember.Setter = set_9_ObjectWithNullableBoolProperty_NullableBool;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension.Source":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_10_BitmapIconExtension_Source;
                xamlMember.Setter = set_10_BitmapIconExtension_Source;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension.ShowAsMonochrome":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "ShowAsMonochrome", "Boolean");
                xamlMember.Getter = get_11_BitmapIconExtension_ShowAsMonochrome;
                xamlMember.Setter = set_11_BitmapIconExtension_ShowAsMonochrome;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension.Source":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.Getter = get_12_BitmapIconSourceExtension_Source;
                xamlMember.Setter = set_12_BitmapIconSourceExtension_Source;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension.ShowAsMonochrome":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.BitmapIconSourceExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "ShowAsMonochrome", "Boolean");
                xamlMember.Getter = get_13_BitmapIconSourceExtension_ShowAsMonochrome;
                xamlMember.Setter = set_13_BitmapIconSourceExtension_ShowAsMonochrome;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension.Symbol":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconSourceExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_14_SymbolIconSourceExtension_Symbol;
                xamlMember.Setter = set_14_SymbolIconSourceExtension_Symbol;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.FontSize":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.Getter = get_15_TextIconExtension_FontSize;
                xamlMember.Setter = set_15_TextIconExtension_FontSize;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.FontWeight":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.Getter = get_16_TextIconExtension_FontWeight;
                xamlMember.Setter = set_16_TextIconExtension_FontWeight;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.FontStyle":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.Getter = get_17_TextIconExtension_FontStyle;
                xamlMember.Setter = set_17_TextIconExtension_FontStyle;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.Foreground":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_18_TextIconExtension_Foreground;
                xamlMember.Setter = set_18_TextIconExtension_Foreground;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.IsTextScaleFactorEnabled":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "IsTextScaleFactorEnabled", "Boolean");
                xamlMember.Getter = get_19_TextIconExtension_IsTextScaleFactorEnabled;
                xamlMember.Setter = set_19_TextIconExtension_IsTextScaleFactorEnabled;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension.MirroredWhenRightToLeft":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.TextIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "MirroredWhenRightToLeft", "Boolean");
                xamlMember.Getter = get_20_TextIconExtension_MirroredWhenRightToLeft;
                xamlMember.Setter = set_20_TextIconExtension_MirroredWhenRightToLeft;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension.Glyph":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Glyph", "String");
                xamlMember.Getter = get_21_FontIconSourceExtension_Glyph;
                xamlMember.Setter = set_21_FontIconSourceExtension_Glyph;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension.FontFamily":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.FontIconSourceExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.Getter = get_22_FontIconSourceExtension_FontFamily;
                xamlMember.Setter = set_22_FontIconSourceExtension_FontFamily;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension.Symbol":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.SymbolIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_23_SymbolIconExtension_Symbol;
                xamlMember.Setter = set_23_SymbolIconExtension_Symbol;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension.Glyph":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "Glyph", "String");
                xamlMember.Getter = get_24_FontIconExtension_Glyph;
                xamlMember.Setter = set_24_FontIconExtension_Glyph;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension.FontFamily":
                userType = (global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Extensions.FontIconExtension");
                xamlMember = new global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.Getter = get_25_FontIconExtension_FontFamily;
                xamlMember.Setter = set_25_FontIconExtension_FontFamily;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlSystemBaseType
        , global::Windows.UI.Xaml.Markup.IXamlType2
    {
        global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;
        global::Windows.UI.Xaml.Markup.IXamlType _boxedType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        public global::Windows.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Windows.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::UnitTests.UWP.UnitTests_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

