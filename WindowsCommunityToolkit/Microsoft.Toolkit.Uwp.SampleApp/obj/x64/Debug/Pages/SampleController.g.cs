#pragma warning disable  
ï»¿#pragma checksum "C:\Users\GMateusDP\source\repos\WindowsCommunityToolkit\Microsoft.Toolkit.Uwp.SampleApp\Pages\SampleController.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "2E16F0B17757731EE84C623B94D7ED900E3151D8A0F3AA835F74AE0E863E104D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Toolkit.Uwp.SampleApp
{
    partial class SampleController : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_StateTrigger_IsActive(global::Windows.UI.Xaml.StateTrigger obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SampleController_obj28_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISampleController_Bindings
        {
            private global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj28;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj29;

            public SampleController_obj28_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 28: // Pages\SampleController.xaml line 133
                        this.obj28 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Button)target);
                        break;
                    case 29: // Pages\SampleController.xaml line 140
                        this.obj29 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj28.Target as global::Windows.UI.Xaml.Controls.Button).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // ISampleController_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Label(obj.Label, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 140
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj29, obj, null);
                }
            }
            private void Update_Label(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 133
                    if ((this.obj28.Target as global::Windows.UI.Xaml.Controls.Button) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content((this.obj28.Target as global::Windows.UI.Xaml.Controls.Button), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SampleController_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISampleController_Bindings
        {
            private global::Microsoft.Toolkit.Uwp.SampleApp.SampleController dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.AppBarButton obj11;
            private global::Windows.UI.Xaml.Controls.Border obj23;
            private global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel obj25;
            private global::Windows.UI.Xaml.Controls.ItemsControl obj26;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj30;
            private global::Windows.UI.Xaml.Controls.TextBlock obj31;
            private global::Windows.UI.Xaml.Controls.AppBarSeparator obj33;
            private global::Windows.UI.Xaml.Controls.StackPanel obj34;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj35;
            private global::Windows.UI.Xaml.StateTrigger obj43;
            private global::Windows.UI.Xaml.StateTrigger obj44;
            private global::Windows.UI.Xaml.StateTrigger obj45;
            private global::Windows.UI.Xaml.StateTrigger obj46;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj11Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj30Click;

            private SampleController_obj1_BindingsTracking bindingsTracking;

            public SampleController_obj1_Bindings()
            {
                this.bindingsTracking = new SampleController_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 11: // Pages\SampleController.xaml line 164
                        this.obj11 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj11Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ExpandCollapsePane();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj11Click;
                        break;
                    case 23: // Pages\SampleController.xaml line 107
                        this.obj23 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 25: // Pages\SampleController.xaml line 112
                        this.obj25 = (global::Microsoft.Toolkit.Uwp.UI.Controls.DropShadowPanel)target;
                        break;
                    case 26: // Pages\SampleController.xaml line 122
                        this.obj26 = (global::Windows.UI.Xaml.Controls.ItemsControl)target;
                        break;
                    case 30: // Pages\SampleController.xaml line 88
                        this.obj30 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        this.obj30Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.OpenClosePane();
                        };
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += obj30Click;
                        break;
                    case 31: // Pages\SampleController.xaml line 41
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 33: // Pages\SampleController.xaml line 64
                        this.obj33 = (global::Windows.UI.Xaml.Controls.AppBarSeparator)target;
                        break;
                    case 34: // Pages\SampleController.xaml line 68
                        this.obj34 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 35: // Pages\SampleController.xaml line 73
                        this.obj35 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_35(this.obj35);
                        break;
                    case 43: // Pages\SampleController.xaml line 335
                        this.obj43 = (global::Windows.UI.Xaml.StateTrigger)target;
                        break;
                    case 44: // Pages\SampleController.xaml line 326
                        this.obj44 = (global::Windows.UI.Xaml.StateTrigger)target;
                        break;
                    case 45: // Pages\SampleController.xaml line 317
                        this.obj45 = (global::Windows.UI.Xaml.StateTrigger)target;
                        break;
                    case 46: // Pages\SampleController.xaml line 299
                        this.obj46 = (global::Windows.UI.Xaml.StateTrigger)target;
                        break;
                    default:
                        break;
                }
            }

            // ISampleController_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Microsoft.Toolkit.Uwp.SampleApp.SampleController)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private bool TryGet_UseBackground(out global::System.Boolean val)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.SampleController obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.UseBackground;
                    return true;
                }
                else
                {
                    val = default(global::System.Boolean);
                    return false;
                }
            }

            private bool TryGet_(out global::Microsoft.Toolkit.Uwp.SampleApp.SampleController val)
            {
                val = this.dataRoot;
                return true;
            }

            private bool TryGet_Commands_Count(out global::System.Int32 val)
            {
                global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> obj;
                if (TryGet_Commands(out obj) && obj != null)
                {
                    val = obj.Count;
                    return true;
                }
                else
                {
                    val = default(global::System.Int32);
                    return false;
                }
            }

            private bool TryGet_Commands(out global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> val)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.SampleController obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.Commands;
                    return true;
                }
                else
                {
                    val = default(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand>);
                    return false;
                }
            }

            private bool TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_None(out global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState val)
            {
                val = global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.None;
                return true;
            }

            private bool TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Closed(out global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState val)
            {
                val = global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Closed;
                return true;
            }

            private bool TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Normal(out global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState val)
            {
                val = global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Normal;
                return true;
            }

            private bool TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Full(out global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState val)
            {
                val = global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Full;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_M_Not_2819123099(int phase)
            {
                global::System.Boolean p0;
                if (!TryGet_UseBackground(out p0)) { return; }
                global::Windows.UI.Xaml.Visibility result = this.dataRoot.Not(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 107
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj23, result);
                }
            }

            private void Invoke_M_GreaterThanZero_109307911(int phase)
            {
                global::System.Int32 p0;
                if (!TryGet_Commands_Count(out p0)) { return; }
                global::Windows.UI.Xaml.Visibility result = this.dataRoot.GreaterThanZero(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 112
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj25, result);
                }
            }

            private void Invoke_SidePaneState_M_Equals_422320625(int phase)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState p0;
                if (!TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_None(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.SidePaneState.Equals(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 335
                    XamlBindingSetters.Set_Windows_UI_Xaml_StateTrigger_IsActive(this.obj43, result);
                }
            }

            private void Invoke_SidePaneState_M_Equals_1607817201(int phase)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState p0;
                if (!TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Closed(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.SidePaneState.Equals(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 326
                    XamlBindingSetters.Set_Windows_UI_Xaml_StateTrigger_IsActive(this.obj44, result);
                }
            }

            private void Invoke_SidePaneState_M_Equals_346739172(int phase)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState p0;
                if (!TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Normal(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.SidePaneState.Equals(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 317
                    XamlBindingSetters.Set_Windows_UI_Xaml_StateTrigger_IsActive(this.obj45, result);
                }
            }

            private void Invoke_SidePaneState_M_Equals_3053449638(int phase)
            {
                global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState p0;
                if (!TryGet_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Full(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.SidePaneState.Equals(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 299
                    XamlBindingSetters.Set_Windows_UI_Xaml_StateTrigger_IsActive(this.obj46, result);
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Microsoft.Toolkit.Uwp.SampleApp.SampleController obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CanChangePaneState(obj.CanChangePaneState, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_UseBackground(obj.UseBackground, phase);
                        this.Update_M_Not_2819123099(phase);
                        this.Update_Commands(obj.Commands, phase);
                        this.Update_M_GreaterThanZero_109307911(phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CurrentSample(obj.CurrentSample, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SidePaneState(obj.SidePaneState, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_CurrentSample(phase);
                    }
                }
                this.Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_None(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.None, phase);
                this.Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Closed(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Closed, phase);
                this.Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Normal(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Normal, phase);
                this.Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Full(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState.Full, phase);
                this.CompleteUpdate(phase);
            }
            private void Update_CanChangePaneState(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                {
                    this.Update_CanChangePaneState_Cast_CanChangePaneState_To_Visibility(obj ? global::Windows.UI.Xaml.Visibility.Visible : global::Windows.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_CanChangePaneState_Cast_CanChangePaneState_To_Visibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 164
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, obj);
                    // Pages\SampleController.xaml line 64
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj33, obj);
                    // Pages\SampleController.xaml line 68
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj34, obj);
                }
            }
            private void Update_UseBackground(global::System.Boolean obj, int phase)
            {
                this.Update_M_Not_2819123099(phase);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\SampleController.xaml line 73
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj35, obj);
                }
            }
            private void Update_M_Not_2819123099(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["M_Not_2819123099"] = new InvokeFunctionDelegate(this.Invoke_M_Not_2819123099); 
                }
            }
            private void Update_Commands(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Commands(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Commands_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 122
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj26, obj, null);
                }
            }
            private void Update_Commands_Count(global::System.Int32 obj, int phase)
            {
                this.Update_M_GreaterThanZero_109307911(phase);
            }
            private void Update_M_GreaterThanZero_109307911(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["M_GreaterThanZero_109307911"] = new InvokeFunctionDelegate(this.Invoke_M_GreaterThanZero_109307911); 
                }
            }
            private void Update_CurrentSample(global::Microsoft.Toolkit.Uwp.SampleApp.Sample obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CurrentSample_Name(obj.Name, phase);
                    }
                }
                else
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.UpdateFallback_CurrentSample_Name(phase);
                    }
                }
            }
            private void Update_CurrentSample_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 41
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj31, obj, null);
                }
            }
            private void Update_SidePaneState(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_SidePaneState_M_Equals_422320625(phase);
                    this.Update_SidePaneState_M_Equals_1607817201(phase);
                    this.Update_SidePaneState_M_Equals_346739172(phase);
                    this.Update_SidePaneState_M_Equals_3053449638(phase);
                }
            }
            private void Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_None(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState obj, int phase)
            {
                this.Update_SidePaneState_M_Equals_422320625(phase);
            }
            private void Update_SidePaneState_M_Equals_422320625(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["SidePaneState_M_Equals_422320625"] = new InvokeFunctionDelegate(this.Invoke_SidePaneState_M_Equals_422320625); 
                }
            }
            private void Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Closed(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState obj, int phase)
            {
                this.Update_SidePaneState_M_Equals_1607817201(phase);
            }
            private void Update_SidePaneState_M_Equals_1607817201(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["SidePaneState_M_Equals_1607817201"] = new InvokeFunctionDelegate(this.Invoke_SidePaneState_M_Equals_1607817201); 
                }
            }
            private void Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Normal(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState obj, int phase)
            {
                this.Update_SidePaneState_M_Equals_346739172(phase);
            }
            private void Update_SidePaneState_M_Equals_346739172(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["SidePaneState_M_Equals_346739172"] = new InvokeFunctionDelegate(this.Invoke_SidePaneState_M_Equals_346739172); 
                }
            }
            private void Update_Microsoft_Toolkit_Uwp_SampleApp_Models_PaneState_Full(global::Microsoft.Toolkit.Uwp.SampleApp.Models.PaneState obj, int phase)
            {
                this.Update_SidePaneState_M_Equals_3053449638(phase);
            }
            private void Update_SidePaneState_M_Equals_3053449638(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    this.PendingFunctionBindings["SidePaneState_M_Equals_3053449638"] = new InvokeFunctionDelegate(this.Invoke_SidePaneState_M_Equals_3053449638); 
                }
            }

            private void UpdateFallback_CurrentSample(int phase)
            {
                this.UpdateFallback_CurrentSample_Name(phase);
            }

            private void UpdateFallback_CurrentSample_Name(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\SampleController.xaml line 41
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj31, "Sample", null);
                }
            }
            private void UpdateTwoWay_35_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.UseBackground = this.obj35.IsOn;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SampleController_obj1_BindingsTracking
            {
                private global::System.WeakReference<SampleController_obj1_Bindings> weakRefToBindingObj; 

                public SampleController_obj1_BindingsTracking(SampleController_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SampleController_obj1_Bindings>(obj);
                }

                public SampleController_obj1_Bindings TryGetBindingObject()
                {
                    SampleController_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Commands(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SampleController_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.SampleApp.SampleController obj = sender as global::Microsoft.Toolkit.Uwp.SampleApp.SampleController;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_UseBackground(obj.UseBackground, DATA_CHANGED);
                                bindings.Update_M_Not_2819123099(DATA_CHANGED);
                                bindings.Update_Commands(obj.Commands, DATA_CHANGED);
                                bindings.Update_M_GreaterThanZero_109307911(DATA_CHANGED);
                                bindings.Update_SidePaneState(obj.SidePaneState, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "UseBackground":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UseBackground(obj.UseBackground, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Commands":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Commands(obj.Commands, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SidePaneState":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SidePaneState(obj.SidePaneState, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Not":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_M_Not_2819123099(DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GreaterThanZero":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_M_GreaterThanZero_109307911(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void UpdateChildListeners_(global::Microsoft.Toolkit.Uwp.SampleApp.SampleController obj)
                {
                    SampleController_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Commands(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SampleController_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Commands_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Commands_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void CollectionChanged_Commands(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SampleController_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand>;
                if (obj != null)
                {
                    bindings.Update_Commands_Count(obj.Count, DATA_CHANGED);
                }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> cache_Commands = null;
                public void UpdateChildListeners_Commands(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.SampleApp.Common.SampleCommand> obj)
                {
                    if (obj != cache_Commands)
                    {
                        if (cache_Commands != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Commands).PropertyChanged -= PropertyChanged_Commands;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_Commands).CollectionChanged -= CollectionChanged_Commands;
                            cache_Commands = null;
                        }
                        if (obj != null)
                        {
                            cache_Commands = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Commands;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_Commands;
                        }
                    }
                }
                public void RegisterTwoWayListener_35(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_35_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Pages\SampleController.xaml line 18
                {
                    this.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3: // Pages\SampleController.xaml line 21
                {
                    this.SideColumn = (global::Windows.UI.Xaml.Controls.ColumnDefinition)(target);
                }
                break;
            case 4: // Pages\SampleController.xaml line 30
                {
                    this.SampleTitleBar = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 5: // Pages\SampleController.xaml line 99
                {
                    this.DemoAreaGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 6: // Pages\SampleController.xaml line 151
                {
                    this.InfoAreaGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 7: // Pages\SampleController.xaml line 242
                {
                    this.ExceptionNotification = (global::Microsoft.Toolkit.Uwp.UI.Controls.InAppNotification)(target);
                }
                break;
            case 8: // Pages\SampleController.xaml line 253
                {
                    this.waitRing = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 9: // Pages\SampleController.xaml line 158
                {
                    this.InfoAreaPivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                    ((global::Windows.UI.Xaml.Controls.Pivot)this.InfoAreaPivot).SelectionChanged += this.InfoAreaPivot_OnSelectionChanged;
                }
                break;
            case 10: // Pages\SampleController.xaml line 218
                {
                    this.Splitter = (global::Microsoft.Toolkit.Uwp.UI.Controls.GridSplitter)(target);
                }
                break;
            case 11: // Pages\SampleController.xaml line 164
                {
                    this.ExpandPane = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 12: // Pages\SampleController.xaml line 171
                {
                    this.PropertiesPivotItem = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 13: // Pages\SampleController.xaml line 179
                {
                    this.XamlPivotItem = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 14: // Pages\SampleController.xaml line 184
                {
                    this.XamlReadOnlyPivotItem = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 15: // Pages\SampleController.xaml line 190
                {
                    this.CSharpPivotItem = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 16: // Pages\SampleController.xaml line 197
                {
                    this.DocumentationPivotItem = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 17: // Pages\SampleController.xaml line 200
                {
                    this.DocumentationScrollViewer = (global::Windows.UI.Xaml.Controls.ScrollViewer)(target);
                }
                break;
            case 18: // Pages\SampleController.xaml line 201
                {
                    this.DocumentationTextBlock = (global::Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock)(target);
                    ((global::Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock)this.DocumentationTextBlock).ImageResolving += this.DocumentationTextBlock_ImageResolving;
                    ((global::Microsoft.Toolkit.Uwp.UI.Controls.MarkdownTextBlock)this.DocumentationTextBlock).LinkClicked += this.DocumentationTextBlock_OnLinkClicked;
                }
                break;
            case 19: // Pages\SampleController.xaml line 193
                {
                    this.CSharpCodeRenderer = (global::Microsoft.Toolkit.Uwp.SampleApp.Controls.CodeRenderer)(target);
                }
                break;
            case 20: // Pages\SampleController.xaml line 187
                {
                    this.XamlReadOnlyCodeRenderer = (global::Microsoft.Toolkit.Uwp.SampleApp.Controls.CodeRenderer)(target);
                }
                break;
            case 21: // Pages\SampleController.xaml line 181
                {
                    this.XamlCodeEditor = (global::Microsoft.Toolkit.Uwp.SampleApp.Controls.XamlCodeEditor)(target);
                }
                break;
            case 22: // Pages\SampleController.xaml line 175
                {
                    this.Properties = (global::Microsoft.Toolkit.Uwp.SampleApp.Controls.PropertyControl)(target);
                }
                break;
            case 23: // Pages\SampleController.xaml line 107
                {
                    this.PlainBackground = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 24: // Pages\SampleController.xaml line 110
                {
                    this.SampleContent = (global::Windows.UI.Xaml.Controls.ContentPresenter)(target);
                }
                break;
            case 30: // Pages\SampleController.xaml line 88
                {
                    this.NarrowInfoButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 32: // Pages\SampleController.xaml line 47
                {
                    this.GithubButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.GithubButton).Click += this.GitHub_OnClick;
                }
                break;
            case 35: // Pages\SampleController.xaml line 73
                {
                    this.BGSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 36: // Pages\SampleController.xaml line 80
                {
                    this.ThemePicker = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 37: // Pages\SampleController.xaml line 269
                {
                    this.WindowStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.WindowStates).CurrentStateChanged += this.WindowStates_CurrentStateChanged;
                }
                break;
            case 38: // Pages\SampleController.xaml line 295
                {
                    this.PaneStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.PaneStates).CurrentStateChanged += this.PaneStates_CurrentStateChanged;
                }
                break;
            case 39: // Pages\SampleController.xaml line 297
                {
                    this.Full = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 40: // Pages\SampleController.xaml line 315
                {
                    this.Show = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 41: // Pages\SampleController.xaml line 324
                {
                    this.Hide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 42: // Pages\SampleController.xaml line 333
                {
                    this.None = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 47: // Pages\SampleController.xaml line 271
                {
                    this.NarrowState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 48: // Pages\SampleController.xaml line 289
                {
                    this.WideState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Pages\SampleController.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SampleController_obj1_Bindings bindings = new SampleController_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 28: // Pages\SampleController.xaml line 133
                {                    
                    global::Windows.UI.Xaml.Controls.Button element28 = (global::Windows.UI.Xaml.Controls.Button)target;
                    SampleController_obj28_Bindings bindings = new SampleController_obj28_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element28.DataContext);
                    element28.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element28, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element28, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

